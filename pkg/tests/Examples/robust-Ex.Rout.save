
R version 2.9.2 (2009-08-24)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### * <HEADER>
> ###
> attach(NULL, name = "CheckExEnv")
> assign("nameEx",
+        local({
+ 	   s <- "__{must remake R-ex/*.R}__"
+            function(new) {
+                if(!missing(new)) s <<- new else s
+            }
+        }),
+        pos = "CheckExEnv")
> ## Add some hooks to label plot pages for base and grid graphics
> assign("base_plot_hook",
+        function() {
+            pp <- par(c("mfg","mfcol","oma","mar"))
+            if(all(pp$mfg[1:2] == c(1, pp$mfcol[2]))) {
+                outer <- (oma4 <- pp$oma[4]) > 0; mar4 <- pp$mar[4]
+                mtext(sprintf("help(\"%s\")", nameEx()), side = 4,
+                      line = if(outer)max(1, oma4 - 1) else min(1, mar4 - 1),
+                outer = outer, adj = 1, cex = .8, col = "orchid", las=3)
+            }
+        },
+        pos = "CheckExEnv")
> assign("grid_plot_hook",
+        function() {
+            grid::pushViewport(grid::viewport(width=grid::unit(1, "npc") -
+                               grid::unit(1, "lines"), x=0, just="left"))
+            grid::grid.text(sprintf("help(\"%s\")", nameEx()),
+                            x=grid::unit(1, "npc") + grid::unit(0.5, "lines"),
+                            y=grid::unit(0.8, "npc"), rot=90,
+                            gp=grid::gpar(col="orchid"))
+        },
+        pos = "CheckExEnv")
> setHook("plot.new",     get("base_plot_hook", pos = "CheckExEnv"))
> setHook("persp",        get("base_plot_hook", pos = "CheckExEnv"))
> setHook("grid.newpage", get("grid_plot_hook", pos = "CheckExEnv"))
> assign("cleanEx",
+        function(env = .GlobalEnv) {
+ 	   rm(list = ls(envir = env, all.names = TRUE), envir = env)
+            RNGkind("default", "default")
+ 	   set.seed(1)
+    	   options(warn = 1)
+ 	   .CheckExEnv <- as.environment("CheckExEnv")
+ 	   delayedAssign("T", stop("T used instead of TRUE"),
+ 		  assign.env = .CheckExEnv)
+ 	   delayedAssign("F", stop("F used instead of FALSE"),
+ 		  assign.env = .CheckExEnv)
+ 	   sch <- search()
+ 	   newitems <- sch[! sch %in% .oldSearch]
+ 	   for(item in rev(newitems))
+                eval(substitute(detach(item), list(item=item)))
+ 	   missitems <- .oldSearch[! .oldSearch %in% sch]
+ 	   if(length(missitems))
+ 	       warning("items ", paste(missitems, collapse=", "),
+ 		       " have been removed from the search path")
+        },
+        pos = "CheckExEnv")
> assign("ptime", proc.time(), pos = "CheckExEnv")
> ## at least one package changes these via ps.options(), so do this
> ## before loading the package.
> ## Use postscript as incomplete files may be viewable, unlike PDF.
> ## Choose a size that is close to on-screen devices, fix paper
> grDevices::ps.options(width = 7, height = 7, paper = "a4", reset = TRUE)
> grDevices::postscript("robust-Ex.ps")
> 
> assign("par.postscript", graphics::par(no.readonly = TRUE), pos = "CheckExEnv")
> options(contrasts = c(unordered = "contr.treatment", ordered = "contr.poly"))
> options(warn = 1)
> library('robust')
Loading required package: MASS
Loading required package: lattice
Loading required package: robustbase
Loading required package: rrcov
Loading required package: pcaPP
Loading required package: mvtnorm
pcaPP 0.1-1 loaded
Scalable Robust Estimators with High Breakdown Point (version 0.5-02)

Attaching package: 'robust'


	The following object(s) are masked from package:stats :

	 cov 

> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> assign(".oldNS", loadedNamespaces(), pos = 'CheckExEnv')
> cleanEx(); nameEx("add1.lmRob")
> ### * add1.lmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add1.lmRob
> ### Title: Add Terms to a Robust Linear Model Object
> ### Aliases: add1.lmRob
> ### Keywords: robust regression methods
> 
> ### ** Examples
> 
> data(stack.dat)
> stack.rob <- lmRob(Loss ~ Water.Temp, data = stack.dat) 
> add1(stack.rob, . ~ . + Air.Flow + Acid.Conc.) 
Single term additions

Model:
Loss ~ Water.Temp

scale: 4.599946 

           Df    RFPE
<none>      0 13.5915
Air.Flow    1  7.6312
Acid.Conc.  1 14.6099
> 
> 
> 
> cleanEx(); nameEx("anova.glmRob")
> ### * anova.glmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anova.glmRob
> ### Title: ANOVA for Robust Generalized Linear Model Fits
> ### Aliases: anova.glmRob anova.glmRoblist
> ### Keywords: robust regression methods
> 
> ### ** Examples
> 
> data(breslow.dat)
> 
> bres.int <- glmRob(sumY ~ Age10 + Base4*Trt, family = poisson(), data = breslow.dat)
> anova(bres.int)
Analysis of Deviance Table

poisson model

Response: sumY

Terms added sequentially (first to last)
          Df Deviance Resid. Df Resid. Dev
NULL                         58    11983.1
Age10      1   9125.7        57     2857.5
Base4      1    803.0        56     2054.5
Trt        1   -884.6        55     2939.1
Base4:Trt  1   -949.1        54     3888.2
> 
> bres.main <- glmRob(sumY ~ Age10 + Base4 + Trt, family = poisson(), data = breslow.dat)
> anova(bres.main, bres.int)
                Terms Resid. Df Resid. Dev       Test Df  Deviance
1 Age10 + Base4 + Trt        55   2939.072            NA        NA
2 Age10 + Base4 * Trt        54   3888.204 +Base4:Trt  1 -949.1315
> 
> 
> 
> cleanEx(); nameEx("anova.lmRob")
> ### * anova.lmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anova.lmRob
> ### Title: ANOVA for Robust Linear Model Fits
> ### Aliases: anova.lmRob anova.lmRoblist
> ### Keywords: robust regression methods
> 
> ### ** Examples
> 
> data(stack.dat)
> stack.small <- lmRob(Loss ~ Water.Temp + Acid.Conc., data = stack.dat)
> stack.full <- lmRob(Loss ~ ., data = stack.dat)
> anova(stack.full)

Terms added sequentially (first to last)

            Chisq Df RobustF     Pr(F)    
(Intercept)        1                      
Air.Flow           1  41.228 6.026e-11 ***
Water.Temp         1   6.522  0.009257 ** 
Acid.Conc.         1   0.551  0.449386    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> anova(stack.full, stack.small)

Response: Loss
      Terms        Df RobustF    Pr(F)    
[1,]  1.000  1.000                        
[2,]  2.000  1.000  1  27.354 9.84e-08 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> 
> 
> cleanEx(); nameEx("arg.names")
> ### * arg.names
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: arg.names
> ### Title: Argument Names
> ### Aliases: arg.names
> ### Keywords: utilities
> 
> ### ** Examples
> 
>   arg.names(lm)
NULL
> 
> 
> 
> cleanEx(); nameEx("breslow.dat")
> ### * breslow.dat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: breslow.dat
> ### Title: Breslow Data
> ### Aliases: breslow.dat
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(breslow.dat)
> 
> 
> 
> cleanEx(); nameEx("ccov")
> ### * ccov
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ccov
> ### Title: Classical Covariance Estimation
> ### Aliases: ccov cov
> ### Keywords: multivariate
> 
> ### ** Examples
> 
>   data(stack.dat)
>   ccov(stack.dat)
Call:
ccov(data = stack.dat)

Classical Estimate of Covariance: 
                Loss Air.Flow Water.Temp Acid.Conc.
Loss       103.46190 85.76429  28.147619  21.792857
Air.Flow    85.76429 84.05714  22.657143  24.571429
Water.Temp  28.14762 22.65714   9.990476   6.621429
Acid.Conc.  21.79286 24.57143   6.621429  28.714286

Classical Estimate of Location: 
      Loss   Air.Flow Water.Temp Acid.Conc. 
  17.52381   60.42857   21.09524   86.28571 
> 
> 
> 
> cleanEx(); nameEx("coef.glmfm")
> ### * coef.glmfm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coef.glmfm
> ### Title: Extract Model Coefficients
> ### Aliases: coef.glmfm
> ### Keywords: methods
> 
> ### ** Examples
> 
> data(breslow.dat)
> bres.fm <- fit.models(list(Robust = "glmRob", Classical = "glm"),
+                       formula = sumY ~ Age10 + Base4*Trt,
+                       family = poisson(), data = breslow.dat)
> coef(bres.fm)
          (Intercept)     Age10      Base4 Trtprogabide Base4:Trtprogabide
Robust       1.835157 0.1208133 0.13915040   -0.3927866        0.021817701
Classical    1.968014 0.2434901 0.08542626   -0.2552565        0.007534172
> 
> 
> 
> cleanEx(); nameEx("coef.lmfm")
> ### * coef.lmfm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coef.lmfm
> ### Title: Extract Model Coefficients
> ### Aliases: coef.lmfm
> ### Keywords: methods
> 
> ### ** Examples
> 
> data(stack.dat)
> stack.fm <- fit.models(list(Robust = "lmRob", LS = "lm"), Loss ~ ., data = stack.dat)
> coef(stack.fm)
       (Intercept)  Air.Flow Water.Temp  Acid.Conc.
Robust   -37.65246 0.7976856  0.5773405 -0.06706018
LS       -39.91967 0.7156402  1.2952861 -0.15212252
> 
> 
> 
> cleanEx(); nameEx("covRob")
> ### * covRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: covRob
> ### Title: Robust Covariance/Correlation Matrix Estimation
> ### Aliases: covRob
> ### Keywords: multivariate robust
> 
> ### ** Examples
> 
>   data(stackloss)
>   covRob(stackloss)
Call:
covRob(data = stackloss)

Robust Estimate of Covariance: 
           Air.Flow Water.Temp Acid.Conc. stack.loss
Air.Flow   33.93175  11.203193  22.135231   29.41440
Water.Temp 11.20319   8.297670   8.794024   12.02969
Acid.Conc. 22.13523   8.794024  37.886981   17.60456
stack.loss 29.41440  12.029685  17.604558   28.17230

Robust Estimate of Location: 
  Air.Flow Water.Temp Acid.Conc. stack.loss 
  56.91508   20.43369   86.28618   13.72901 
> 
> 
> 
> cleanEx(); nameEx("covRob.control")
> ### * covRob.control
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: covRob.control
> ### Title: Control Parameters for Robust Covariance Estimation
> ### Aliases: covRob.control
> ### Keywords: utilities
> 
> ### ** Examples
> 
>   mcd.control <- covRob.control("mcd", quan = 0.75, ntrial = 1000)
> 
>   ds.control <- covRob.control("donostah", prob = 0.95)
> 
>   qc.control <- covRob.control("pairwiseqc")
> 
> 
> 
> cleanEx(); nameEx("covfmDistance2Plot")
> ### * covfmDistance2Plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: covfmDistance2Plot
> ### Title: Distance - Distance Plot
> ### Aliases: covfmDistance2Plot
> ### Keywords: hplot
> 
> ### ** Examples
> 
>  data(woodmod.dat)
>  woodmod.fm <- fit.models(list(Robust = "covRob", Classical = "ccov"),
+                           data = woodmod.dat)
>  covfmDistance2Plot(woodmod.fm)
> 
> 
> 
> cleanEx(); nameEx("covfmEllipsesPlot")
> ### * covfmEllipsesPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: covfmEllipsesPlot
> ### Title: Ellipses Plot
> ### Aliases: covfmEllipsesPlot
> ### Keywords: hplot
> 
> ### ** Examples
> 
>   data(woodmod.dat)
>   woodmod.fm <- fit.models(list(Robust = "covRob", Classical = "ccov"),
+                            data = woodmod.dat)
>   covfmEllipsesPlot(woodmod.fm)
> 
> 
> 
> cleanEx(); nameEx("covfmScreePlot")
> ### * covfmScreePlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: covfmScreePlot
> ### Title: Screeplot
> ### Aliases: covfmScreePlot
> ### Keywords: hplot
> 
> ### ** Examples
> 
>   data(woodmod.dat)
>   woodmod.fm <- fit.models(list(Robust = "covRob", Classical = "ccov"),
+                            data = woodmod.dat)
>   covfmScreePlot(woodmod.fm)
> 
> 
> 
> cleanEx(); nameEx("covfmSqrtMDPlot")
> ### * covfmSqrtMDPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: covfmSqrtMDPlot
> ### Title: Side-by-Side (Square Root of) Mahalanobis Distances Plot
> ### Aliases: covfmSqrtMDPlot
> ### Keywords: hplot
> 
> ### ** Examples
> 
>   data(woodmod.dat)
>   woodm.fm <- fit.models(list(Robust = "covRob", Classical = "ccov"),
+                          data = woodmod.dat)
>   covfmSqrtMDPlot(woodm.fm)
> 
> 
> 
> cleanEx(); nameEx("drop1.lmRob")
> ### * drop1.lmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drop1.lmRob
> ### Title: Compute an Anova Object by Dropping Terms
> ### Aliases: drop1.lmRob
> ### Keywords: robust regression methods
> 
> ### ** Examples
> 
> data(stack.dat)
> stack.rob <- lmRob(Loss ~ ., data = stack.dat) 
> drop1(stack.rob) 

Single term deletions

Model:
Loss ~ Air.Flow + Water.Temp + Acid.Conc.

scale:  1.837073 

           Df   RFPE
<none>        16.032
Air.Flow    1 36.213
Water.Temp  1 20.829
Acid.Conc.  1 16.049
> 
> 
> 
> cleanEx(); nameEx("fit.models")
> ### * fit.models
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fit.models
> ### Title: Model Comparison
> ### Aliases: fit.models
> ### Keywords: models
> 
> ### ** Examples
> 
>   data(woodmod.dat)
>   woodmod.fm <- fit.models(list(Robust = "covRob", Classical = "ccov"),
+                            data = woodmod.dat)
> 
>   ## This way doesn't work in R yet :
>   #woodmod.cls <- ccov(woodmod.dat)
>   #woodmod.rob <- covRob(woodmod.dat)
>   #woodmod.fm <- fit.models(Robust = woodmod.rob, Classical = woodmod.cls)
> 
> 
> 
> cleanEx(); nameEx("get.fit.models.database")
> ### * get.fit.models.database
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get.fit.models.database
> ### Title: Model Comparison Database
> ### Aliases: get.fit.models.database
> ### Keywords: utilities
> 
> ### ** Examples
> 
>   get.fit.models.database()
$lmfm
$lmfm$classes
[1] "lmRob" "lm"   

$lmfm$object.class
[1] "lmfm"

$lmfm$validation.function
NULL


$glmfm
$glmfm$classes
[1] "glmRob" "glm"   

$glmfm$object.class
[1] "glmfm"

$glmfm$validation.function
NULL


$aovfm
$aovfm$classes
[1] "aovRob" "aov"   

$aovfm$object.class
[1] "aovfm"

$aovfm$validation.function
NULL


$discfm
$discfm$classes
[1] "discRob" "discrim"

$discfm$object.class
[1] "discfm"

$discfm$validation.function
NULL


$covfm
$covfm$classes
[1] "covRob" "cov"    "ccov"  

$covfm$object.class
[1] "covfm"

$covfm$validation.function
NULL


$asymfm
$asymfm$classes
[1] "gammaRob"   "gammaMLE"   "weibullRob" "weibullMLE" "lognormRob"
[6] "lognormMLE"

$asymfm$object.class
[1] "asymfm"

$asymfm$validation.function
NULL


$pcompfm
$pcompfm$classes
[1] "princompRob" "princomp"   

$pcompfm$object.class
[1] "pcompfm"

$pcompfm$validation.function
NULL


> 
> 
> 
> cleanEx(); nameEx("glmRob")
> ### * glmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glmRob
> ### Title: Fit a Robust Generalized Linear Model
> ### Aliases: glmRob
> ### Keywords: robust regression models
> 
> ### ** Examples
> 
> data(breslow.dat)
> 
> glmRob(sumY ~ Age10 + Base4*Trt, family = poisson(),
+        data = breslow.dat, method = "cubif")
Call:
glmRob(formula = sumY ~ Age10 + Base4 * Trt, family = poisson(), 
    data = breslow.dat, method = "cubif")

Coefficients:
       (Intercept)              Age10              Base4       Trtprogabide 
         1.8351573          0.1208133          0.1391504         -0.3927866 
Base4:Trtprogabide 
         0.0218177 

Degrees of Freedom: 59 Total; 54 Residual
Residual Deviance: 3888.204 
> 
> 
> 
> cleanEx(); nameEx("glmRob.mallows")
> ### * glmRob.mallows
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glmRob.mallows
> ### Title: Mallows Type Estimator
> ### Aliases: glmRob.mallows
> ### Keywords: robust regression
> 
> ### ** Examples
> 
> data(mallows.dat)
> 
> glmRob(y ~ a + b + c, data = mallows.dat, family = binomial(), method = 'mallows')
Call:
glmRob(formula = y ~ a + b + c, family = binomial(), data = mallows.dat, 
    method = "mallows")

Coefficients:
(Intercept)           a           b           c 
-2.04642220  0.10809616  0.08632925  0.12583742 

Degrees of Freedom: 70 Total; 66 Residual
Residual Deviance: 40.05956 
> 
> 
> 
> cleanEx(); nameEx("glmRob.misclass")
> ### * glmRob.misclass
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glmRob.misclass
> ### Title: Consistent Misclassification Estimator
> ### Aliases: glmRob.misclass
> ### Keywords: robust regression
> 
> ### ** Examples
> 
> data(leuk.dat)
> 
> glmRob(y ~ ag + wbc, data = leuk.dat, family = binomial(), method = 'misclass')
Warning in eval(expr, envir, enclos) :
  non-integer #successes in a binomial glm!
Call:
glmRob(formula = y ~ ag + wbc, family = binomial(), data = leuk.dat, 
    method = "misclass")

Coefficients:
  (Intercept)            ag           wbc 
-1.265254e+00  2.219315e+00 -3.275838e-05 

Degrees of Freedom: 33 Total; 30 Residual
Residual Deviance: 29.59432 
> 
> 
> 
> cleanEx(); nameEx("leuk.dat")
> ### * leuk.dat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: leuk.dat
> ### Title: Leuk Data
> ### Aliases: leuk.dat
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(leuk.dat)
> 
> 
> 
> cleanEx(); nameEx("lmRob")
> ### * lmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lmRob
> ### Title: High Breakdown and High Efficiency Robust Linear Regression
> ### Aliases: lmRob
> ### Keywords: robust regression models
> 
> ### ** Examples
> 
> data(stack.dat)
> stack.rob <- lmRob(Loss ~ ., data = stack.dat)
> 
> 
> 
> cleanEx(); nameEx("lmRob.RFPE")
> ### * lmRob.RFPE
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lmRob.RFPE
> ### Title: Robust Final Prediction Errors
> ### Aliases: lmRob.RFPE
> ### Keywords: robust regression
> 
> ### ** Examples
> 
> data(stack.dat)
> stack.rob <- lmRob(Loss ~ ., data = stack.dat)
> lmRob.RFPE(stack.rob)
[1] 16.03201
> 
> 
> 
> cleanEx(); nameEx("lmRob.control")
> ### * lmRob.control
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lmRob.control
> ### Title: Control Parameters for Robust Linear Regression
> ### Aliases: lmRob.control
> ### Keywords: robust regression
> 
> ### ** Examples
> 
> data(stack.dat)
> my.control <- lmRob.control(weight=c("Bisquare","Optimal")) 
> stack.bo <- lmRob(Loss ~ ., data = stack.dat, control = my.control) 
> 
> 
> 
> cleanEx(); nameEx("mallows.dat")
> ### * mallows.dat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mallows.dat
> ### Title: Mallows Data
> ### Aliases: mallows.dat
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(mallows.dat)
> 
> 
> 
> cleanEx(); nameEx("methods.glmRob")
> ### * methods.glmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: methods.glmRob
> ### Title: Methods for glmRob Generic Functions
> ### Aliases: coef.glmRob family.glmRob labels.glmRob model.frame.glmRob
> ###   model.matrix.glmRob residuals.glmRob
> ### Keywords: methods
> 
> ### ** Examples
> 
> data(breslow.dat)
> bres.rob <- glmRob(sumY ~ Age10 + Base4 * Trt, family = poisson(), data = breslow.dat) 
> coef(bres.rob) 
       (Intercept)              Age10              Base4       Trtprogabide 
         1.8351573          0.1208133          0.1391504         -0.3927866 
Base4:Trtprogabide 
         0.0218177 
> family(bres.rob) 

Family: poisson 
Link function: log 

> labels(bres.rob) 
[1] "Age10"     "Base4"     "Trt"       "Base4:Trt"
> model.frame(bres.rob) 
   sumY Age10 Base4       Trt
1    14   3.1  2.75   placebo
2    14   3.0  2.75   placebo
3    11   2.5  1.50   placebo
4    13   3.6  2.00   placebo
5    55   2.2 16.50   placebo
6    22   2.9  6.75   placebo
7    12   3.1  3.00   placebo
8    95   4.2 13.00   placebo
9    22   3.7  5.75   placebo
10   33   2.8  2.50   placebo
11   66   3.6 13.00   placebo
12   30   2.4  8.25   placebo
13   16   2.3  4.50   placebo
14   42   3.6 10.50   placebo
15   59   2.6 21.75   placebo
16   16   2.6 12.50   placebo
17    6   2.8  4.50   placebo
18  123   3.1 27.75   placebo
19   15   3.2  4.50   placebo
20   16   2.1  5.00   placebo
21   14   2.9  3.00   placebo
22   14   2.1  2.25   placebo
23   13   3.2  4.25   placebo
24   30   2.5  7.00   placebo
25  143   3.0 13.75   placebo
26    6   4.0  2.25   placebo
27   10   1.9  2.50   placebo
28   53   2.2 11.75   placebo
29   42   1.8 19.00 progabide
30   28   3.2  9.50 progabide
31    7   2.0  4.75 progabide
32   13   3.0  2.50 progabide
33   19   1.8  4.75 progabide
34   11   2.4  6.00 progabide
35   74   3.0  7.75 progabide
36   20   3.5  3.50 progabide
37   10   2.7  2.75 progabide
38   24   2.0 16.75 progabide
39   29   2.2 10.25 progabide
40    4   2.8  1.75 progabide
41    6   2.3  5.50 progabide
42   12   4.0  3.25 progabide
43   65   3.3 11.50 progabide
44   26   2.1  9.00 progabide
45   39   3.5  9.50 progabide
46    7   2.5  1.75 progabide
47   32   2.6  9.00 progabide
48    3   2.5  2.75 progabide
49  302   2.2 37.75 progabide
50   13   3.2  5.50 progabide
51   26   2.5 10.25 progabide
52   10   3.5  8.00 progabide
53   70   2.1 14.00 progabide
54   13   4.1  6.00 progabide
55   15   3.2  4.00 progabide
56   51   2.6  5.50 progabide
57    6   2.1  6.25 progabide
58    0   3.6  3.25 progabide
59   10   3.7  3.00 progabide
> model.matrix(bres.rob) 
   (Intercept) Age10 Base4 Trtprogabide Base4:Trtprogabide
1            1   3.1  2.75            0               0.00
2            1   3.0  2.75            0               0.00
3            1   2.5  1.50            0               0.00
4            1   3.6  2.00            0               0.00
5            1   2.2 16.50            0               0.00
6            1   2.9  6.75            0               0.00
7            1   3.1  3.00            0               0.00
8            1   4.2 13.00            0               0.00
9            1   3.7  5.75            0               0.00
10           1   2.8  2.50            0               0.00
11           1   3.6 13.00            0               0.00
12           1   2.4  8.25            0               0.00
13           1   2.3  4.50            0               0.00
14           1   3.6 10.50            0               0.00
15           1   2.6 21.75            0               0.00
16           1   2.6 12.50            0               0.00
17           1   2.8  4.50            0               0.00
18           1   3.1 27.75            0               0.00
19           1   3.2  4.50            0               0.00
20           1   2.1  5.00            0               0.00
21           1   2.9  3.00            0               0.00
22           1   2.1  2.25            0               0.00
23           1   3.2  4.25            0               0.00
24           1   2.5  7.00            0               0.00
25           1   3.0 13.75            0               0.00
26           1   4.0  2.25            0               0.00
27           1   1.9  2.50            0               0.00
28           1   2.2 11.75            0               0.00
29           1   1.8 19.00            1              19.00
30           1   3.2  9.50            1               9.50
31           1   2.0  4.75            1               4.75
32           1   3.0  2.50            1               2.50
33           1   1.8  4.75            1               4.75
34           1   2.4  6.00            1               6.00
35           1   3.0  7.75            1               7.75
36           1   3.5  3.50            1               3.50
37           1   2.7  2.75            1               2.75
38           1   2.0 16.75            1              16.75
39           1   2.2 10.25            1              10.25
40           1   2.8  1.75            1               1.75
41           1   2.3  5.50            1               5.50
42           1   4.0  3.25            1               3.25
43           1   3.3 11.50            1              11.50
44           1   2.1  9.00            1               9.00
45           1   3.5  9.50            1               9.50
46           1   2.5  1.75            1               1.75
47           1   2.6  9.00            1               9.00
48           1   2.5  2.75            1               2.75
49           1   2.2 37.75            1              37.75
50           1   3.2  5.50            1               5.50
51           1   2.5 10.25            1              10.25
52           1   3.5  8.00            1               8.00
53           1   2.1 14.00            1              14.00
54           1   4.1  6.00            1               6.00
55           1   3.2  4.00            1               4.00
56           1   2.6  5.50            1               5.50
57           1   2.1  6.25            1               6.25
58           1   3.6  3.25            1               3.25
59           1   3.7  3.00            1               3.00
attr(,"assign")
[1] 0 1 2 3 4
attr(,"contrasts")
attr(,"contrasts")$Trt
[1] "contr.treatment"

> residuals(bres.rob) 
           1            2            3            4            5            6 
  0.17344147   0.21786119   0.17091428   0.05955522  -3.08976565  -0.15914346 
           7            8            9           10           11           12 
 -0.50463606   3.67535884   0.04103291   4.82211469   0.88236855   0.68695294 
          13           14           15           16           17           18 
  0.13279693   0.04211243 -10.30920026  -5.47503147  -2.96349336 -17.62446806 
          19           20           21           22           23           24 
 -0.55470967  -0.04821098   0.13422960   0.85344500  -0.93349940   1.51496488 
          25           26           27           28           29           30 
  8.92506852  -2.39003994  -0.35432530   1.64183225  -7.58765556  -0.13799557 
          31           32           33           34           35           36 
 -1.45140392   1.21724976   2.08611346  -1.04819449   8.92119587   2.31757902 
          37           38           39           40           41           42 
  0.28456070  -7.34890805   0.04953599  -1.52327089  -2.30479793   0.12443018 
          43           44           45           46           47           48 
  3.59875429   0.56703660   1.60869019  -0.21503155   1.41251044  -2.29942456 
          49           50           51           52           53           54 
-54.31623554  -0.55222811  -0.71077893  -3.13098141   2.38188269  -1.29366256 
          55           56           57           58           59 
  0.87659002   7.59333771  -2.62649219  -4.69639941  -0.22299895 
> 
> 
> 
> cleanEx(); nameEx("methods.lmRob")
> ### * methods.lmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: methods.lmRob
> ### Title: Methods for lmRob Generic Functions
> ### Aliases: coef.lmRob deviance.lmRob formula.lmRob labels.lmRob
> ###   model.frame.lmRob model.matrix.lmRob residuals.lmRob weights.lmRob
> ### Keywords: methods
> 
> ### ** Examples
> 
> data(stack.dat)
> stack.rob <- lmRob(Loss ~ ., data = stack.dat) 
> coef(stack.rob) 
 (Intercept)     Air.Flow   Water.Temp   Acid.Conc. 
-37.65245890   0.79768556   0.57734046  -0.06706018 
> deviance(stack.rob) 
[1] 49.30524
> formula(stack.rob) 
Loss ~ Air.Flow + Water.Temp + Acid.Conc.
> labels(stack.rob) 
[1] "Air.Flow"   "Water.Temp" "Acid.Conc."
> model.frame(stack.rob) 
   Loss Air.Flow Water.Temp Acid.Conc.
1    42       80         27         89
2    37       80         27         88
3    37       75         25         90
4    28       62         24         87
5    18       62         22         87
6    18       62         23         87
7    19       62         24         93
8    20       62         24         93
9    15       58         23         87
10   14       58         18         80
11   14       58         18         89
12   13       58         17         88
13   11       58         18         82
14   12       58         19         93
15    8       50         18         89
16    7       50         18         86
17    8       50         19         72
18    8       50         19         79
19    9       50         20         80
20   15       56         20         82
21   15       70         20         91
> model.matrix(stack.rob) 
   (Intercept) Air.Flow Water.Temp Acid.Conc.
1            1       80         27         89
2            1       80         27         88
3            1       75         25         90
4            1       62         24         87
5            1       62         22         87
6            1       62         23         87
7            1       62         24         93
8            1       62         24         93
9            1       58         23         87
10           1       58         18         80
11           1       58         18         89
12           1       58         17         88
13           1       58         18         82
14           1       58         19         93
15           1       50         18         89
16           1       50         18         86
17           1       50         19         72
18           1       50         19         79
19           1       50         20         80
20           1       56         20         82
21           1       70         20         91
attr(,"assign")
[1] 0 1 2 3
> residuals(stack.rob) 
          1           2           3           4           5           6 
 6.21777749  1.15071731  6.42794638  8.17401859 -0.67130050 -1.24864095 
          7           8           9          10          11          12 
-0.42362035  0.57637965 -1.05789871  0.35938234  0.96292393  0.47320421 
         13          14          15          16          17          18 
-2.50649731 -1.34617582  1.34440841  0.14322788 -0.37295506  0.09646618 
         19          20          21 
 0.58618590  1.93419289 -8.62986335 
> weights(stack.rob) 
 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 
 0  1  0  0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  0 
> 
> 
> 
> cleanEx(); nameEx("plot.covfm")
> ### * plot.covfm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.covfm
> ### Title: Plot Method
> ### Aliases: plot.cov plot.covRob plot.covfm
> ### Keywords: methods hplot
> 
> ### ** Examples
> 
> data(woodmod.dat)
> woodmod.cov    <- ccov   (woodmod.dat)
> woodmod.covRob <- covRob(woodmod.dat)
> plot(woodmod.cov, which.plots = 1)
> plot(woodmod.covRob, which = 1)
> 
> woodmod.fm <- fit.models(list(Robust = "covRob", Classical = "ccov"),
+                          data = woodmod.dat)
> plot(woodmod.fm, which = 1)
> 
> 
> 
> cleanEx(); nameEx("plot.lmRob")
> ### * plot.lmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.lmRob
> ### Title: Diagnostic Regression Plots
> ### Aliases: plot.lmRob
> ### Keywords: methods hplot
> 
> ### ** Examples
> 
> data(stack.dat)
> stack.rob <- lmRob(Loss ~ ., data = stack.dat)
> plot(stack.rob, which.plots = 6)
> 
> 
> 
> cleanEx(); nameEx("plot.lmfm")
> ### * plot.lmfm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.lmfm
> ### Title: Comparison Plots for Linear Regression Models
> ### Aliases: plot.lmfm
> ### Keywords: methods hplot
> 
> ### ** Examples
> 
> data(stack.dat)
> stack.fm <- fit.models(list(Robust = "lmRob", LS = "lm"), Loss ~ ., data = stack.dat)
> plot(stack.fm, which.plots = 2)
> 
> 
> 
> cleanEx(); nameEx("predict.glmRob")
> ### * predict.glmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict.glmRob
> ### Title: Predict Method for Robust Generalized Linear Model Fits
> ### Aliases: predict.glmRob
> ### Keywords: robust regression methods
> 
> ### ** Examples
> 
> data(breslow.dat)
> bres.rob <- glmRob(sumY ~ Age10 + Base4 * Trt, family = poisson(), data = breslow.dat) 
> predict(bres.rob)
       1        2        3        4        5        6        7        8 
2.592342 2.580261 2.345916 2.548386 4.396928 3.124781 2.627130 4.151528 
       9       10       11       12       13       14       15       16 
3.082281 2.521311 4.079040 3.273100 2.739205 3.731164 5.175793 3.888652 
      17       18       19       20       21       22       23       24 
2.799611 6.071102 2.847937 2.784617 2.602967 2.401954 2.813149 3.111243 
      25       26       27       28       29       30       31       32 
4.110915 2.631499 2.412579 3.735964 4.718229 3.358170 2.448596 2.207231 
      33       34       35       36       37       38       39       40 
2.424433 2.698131 3.052314 2.428606 2.211229 4.380213 3.358083 2.062342 
      41       42       43       44       45       46       47       48 
2.605566 2.448770 3.692188 3.144792 3.394414 2.026098 3.205198 2.187066 
      49       50       51       52       53       54       55       56 
7.784706 2.714298 3.394327 3.152962 3.949632 2.903514 2.472846 2.641810 
      57       58       59 
2.702129 2.400445 2.372284 
> 
> 
> 
> cleanEx(); nameEx("predict.lmRob")
> ### * predict.lmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict.lmRob
> ### Title: Use predict() on an lmRob Object
> ### Aliases: predict.lmRob
> ### Keywords: robust regression methods
> 
> ### ** Examples
> 
> data(stack.dat)
> stack.rob <- lmRob(Loss ~ ., data = stack.dat)
> predict(stack.rob)
        1         2         3         4         5         6         7         8 
35.782223 35.849283 30.572054 19.825981 18.671300 19.248641 19.423620 19.423620 
        9        10        11        12        13        14        15        16 
16.057899 13.640618 13.037076 12.526796 13.506497 13.346176  6.655592  6.856772 
       17        18        19        20        21 
 8.372955  7.903534  8.413814 13.065807 23.629863 
> predict(stack.rob, newdata = stack.dat[c(1,2,4,21), ], se.fit = TRUE)
$fit
       1        2        4       21 
35.78222 35.84928 19.82598 23.62986 

$se.fit
        1         2         4        21 
1.0869527 1.1059685 0.5557136 0.9526912 

$residual.scale
[1] 1.837073

$df
[1] 17

> 
> 
> 
> cleanEx(); nameEx("print.covfm")
> ### * print.covfm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.covfm
> ### Title: Print Method
> ### Aliases: print.cov print.covRob print.covfm
> ### Keywords: methods
> 
> ### ** Examples
> 
>   data(woodmod.dat)
>   woodmod.cov <- ccov(woodmod.dat)
>   woodmod.covRob <- covRob(woodmod.dat)
>   print(woodmod.cov)
Call:
ccov(data = woodmod.dat)

Classical Estimate of Covariance: 
              V1            V2            V3            V4            V5
V1  0.0082920289 -0.0002912358  0.0036021553  0.0026908211 -0.0028683763
V2 -0.0002912358  0.0004887920 -0.0003520484 -0.0008387663  0.0006123968
V3  0.0036021553 -0.0003520484  0.0041851868  0.0015787579 -0.0016916500
V4  0.0026908211 -0.0008387663  0.0015787579  0.0039461684 -0.0007919895
V5 -0.0028683763  0.0006123968 -0.0016916500 -0.0007919895  0.0027569974

Classical Estimate of Location: 
     V1      V2      V3      V4      V5 
0.55085 0.13304 0.50865 0.51120 0.90695 
>   print(woodmod.covRob)
Call:
covRob(data = woodmod.dat)

Robust Estimate of Covariance: 
             V1            V2            V3            V4            V5
V1  0.038232411  0.0066281691 -0.0021649580 -0.0015136057 -0.0048569583
V2  0.006628169  0.0016511870  0.0001381625 -0.0010400249 -0.0003837196
V3 -0.002164958  0.0001381625  0.0036708838  0.0001513602  0.0015113329
V4 -0.001513606 -0.0010400249  0.0001513602  0.0048313022 -0.0014408971
V5 -0.004856958 -0.0003837196  0.0015113329 -0.0014408971  0.0044166121

Robust Estimate of Location: 
       V1        V2        V3        V4        V5 
0.5692784 0.1189235 0.5093381 0.5399037 0.8963895 
> 
>   woodmod.fm <- fit.models(list(Robust = "covRob", Classical = "ccov"),
+                            data = woodmod.dat)
>   print(woodmod.fm)

Calls: 
Robust    : covRob(data = woodmod.dat)
Classical : ccov(data = woodmod.dat)

Comparison of Covariance/Correlation Estimates:
 (unique covariance terms) 
                [1,1]         [2,1]        [3,1]        [4,1]        [5,1]
Robust    0.038232411  0.0066281691 -0.002164958 -0.001513606 -0.004856958
Classical 0.008292029 -0.0002912358  0.003602155  0.002690821 -0.002868376
                [2,2]         [3,2]         [4,2]         [5,2]       [3,3]
Robust    0.001651187  0.0001381625 -0.0010400249 -0.0003837196 0.003670884
Classical 0.000488792 -0.0003520484 -0.0008387663  0.0006123968 0.004185187
                 [4,3]        [5,3]       [4,4]         [5,4]       [5,5]
Robust    0.0001513602  0.001511333 0.004831302 -0.0014408971 0.004416612
Classical 0.0015787579 -0.001691650 0.003946168 -0.0007919895 0.002756997

Comparison of Location Estimates: 
                 V1        V2        V3        V4        V5
Robust    0.5692784 0.1189235 0.5093381 0.5399037 0.8963895
Classical 0.5508500 0.1330400 0.5086500 0.5112000 0.9069500
> 
> 
> 
> cleanEx(); nameEx("print.glmRob")
> ### * print.glmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.glmRob
> ### Title: Print Method for glmRob Objects
> ### Aliases: print.glmRob
> ### Keywords: methods
> 
> ### ** Examples
> 
> data(breslow.dat)
> bres.rob <- glmRob(sumY ~ Age10 + Base4*Trt, family = poisson(), data = breslow.dat)
> print(bres.rob)
Call:
glmRob(formula = sumY ~ Age10 + Base4 * Trt, family = poisson(), 
    data = breslow.dat)

Coefficients:
       (Intercept)              Age10              Base4       Trtprogabide 
         1.8351573          0.1208133          0.1391504         -0.3927866 
Base4:Trtprogabide 
         0.0218177 

Degrees of Freedom: 59 Total; 54 Residual
Residual Deviance: 3888.204 
> print(bres.rob, digits = 3)
Call:
glmRob(formula = sumY ~ Age10 + Base4 * Trt, family = poisson(), 
    data = breslow.dat)

Coefficients:
       (Intercept)              Age10              Base4       Trtprogabide 
            1.8352             0.1208             0.1392            -0.3928 
Base4:Trtprogabide 
            0.0218 

Degrees of Freedom: 59 Total; 54 Residual
Residual Deviance: 3888.204 
> 
> 
> 
> cleanEx(); nameEx("print.glmfm")
> ### * print.glmfm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.glmfm
> ### Title: Print Method for glmfm Objects
> ### Aliases: print.glmfm
> ### Keywords: methods
> 
> ### ** Examples
> 
> data(breslow.dat)
> bres.fm <- fit.models(list(Robust = "glmRob", Classical = "glm"),
+                       formula = sumY ~ Age10 + Base4*Trt,
+                       family = poisson(), data = breslow.dat)
> print(bres.fm)

Calls: 
Robust : glmRob(formula = sumY ~ Age10 + Base4 * Trt, family = poisson(), 
    data = breslow.dat)
Classical : glm(formula = sumY ~ Age10 + Base4 * Trt, family = poisson(), 
    data = breslow.dat)

Coefficients:
                       Robust    Classical
(Intercept)         1.8351573  1.968014341
Age10               0.1208133  0.243490118
Base4               0.1391504  0.085426259
Trtprogabide       -0.3927866 -0.255256522
Base4:Trtprogabide  0.0218177  0.007534172

Residual Deviance Estimates:
Robust : 3888.2 on 54 degrees of freedom
Classical : 556.513 on 54 degrees of freedom
> print(bres.fm, digits = 4)

Calls: 
Robust : glmRob(formula = sumY ~ Age10 + Base4 * Trt, family = poisson(), 
    data = breslow.dat)
Classical : glm(formula = sumY ~ Age10 + Base4 * Trt, family = poisson(), 
    data = breslow.dat)

Coefficients:
                     Robust Classical
(Intercept)         1.83516  1.968014
Age10               0.12081  0.243490
Base4               0.13915  0.085426
Trtprogabide       -0.39279 -0.255257
Base4:Trtprogabide  0.02182  0.007534

Residual Deviance Estimates:
Robust : 3888.2 on 54 degrees of freedom
Classical : 556.513 on 54 degrees of freedom
> 
> 
> 
> cleanEx(); nameEx("print.lmRob")
> ### * print.lmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.lmRob
> ### Title: Print Method for lmRob Objects
> ### Aliases: print.lmRob
> ### Keywords: methods
> 
> ### ** Examples
> 
> data(stack.dat)
> stack.rob <- lmRob(Loss ~ ., data = stack.dat)
> print(stack.rob)
Call:
lmRob(formula = Loss ~ ., data = stack.dat)

Coefficients:
 (Intercept)     Air.Flow   Water.Temp   Acid.Conc. 
-37.65245890   0.79768556   0.57734046  -0.06706018 

Degrees of freedom: 21 total; 17 residual
Residual standard error: 1.837073 
> print(stack.rob, digits = 3)
Call:
lmRob(formula = Loss ~ ., data = stack.dat)

Coefficients:
(Intercept)    Air.Flow  Water.Temp  Acid.Conc. 
    -37.652       0.798       0.577      -0.067 

Degrees of freedom: 21 total; 17 residual
Residual standard error: 1.84 
> 
> 
> 
> cleanEx(); nameEx("print.lmfm")
> ### * print.lmfm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.lmfm
> ### Title: Print Method for lmfm Objects
> ### Aliases: print.lmfm
> ### Keywords: methods
> 
> ### ** Examples
> 
> data(stack.dat)
> stack.fm <- fit.models(list(Robust = "lmRob", LS = "lm"), Loss ~ ., data = stack.dat)
> print(stack.fm)

Calls: 
Robust: lmRob(formula = Loss ~ ., data = stack.dat)
    LS: lm(formula = Loss ~ ., data = stack.dat)

Coefficients:
                  Robust          LS
(Intercept) -37.65245890 -39.9196744
Air.Flow      0.79768556   0.7156402
Water.Temp    0.57734046   1.2952861
Acid.Conc.   -0.06706018  -0.1521225

Residual standard errors:
Robust: 1.837073 on 17 degrees of freedom
    LS: 3.243364 on 17 degrees of freedom
> 
> 
> 
> cleanEx(); nameEx("print.summary.covfm")
> ### * print.summary.covfm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.summary.covfm
> ### Title: Print Methods for Cov* Summary Results
> ### Aliases: print.summary.cov print.summary.covRob print.summary.covfm
> ### Keywords: methods
> 
> ### ** Examples
> 
>   data(woodmod.dat)
>   woodmod.cov <- ccov(woodmod.dat)
>   woodmod.sc <- summary(woodmod.cov)
>   print(woodmod.sc)
Call:
ccov(data = woodmod.dat)

Classical Estimate of Covariance: 
              V1            V2            V3            V4            V5
V1  0.0082920289 -0.0002912358  0.0036021553  0.0026908211 -0.0028683763
V2 -0.0002912358  0.0004887920 -0.0003520484 -0.0008387663  0.0006123968
V3  0.0036021553 -0.0003520484  0.0041851868  0.0015787579 -0.0016916500
V4  0.0026908211 -0.0008387663  0.0015787579  0.0039461684 -0.0007919895
V5 -0.0028683763  0.0006123968 -0.0016916500 -0.0007919895  0.0027569974

Classical Estimate of Location: 
     V1      V2      V3      V4      V5 
0.55085 0.13304 0.50865 0.51120 0.90695 

Eigenvalues: 
     Eval. 1      Eval. 2      Eval. 3      Eval. 4      Eval. 5 
0.0128526671 0.0029620770 0.0021124678 0.0016344360 0.0001075257 

Classical Mahalanobis Distances: 
       1        2        3        4        5        6        7        8 
4.326734 1.551847 3.223994 3.959220 3.277049 3.973771 9.124140 4.535649 
       9       10       11       12       13       14       15       16 
5.664712 7.587628 5.074749 6.833150 4.506079 1.499654 1.945225 9.048738 
      17       18       19       20 
4.548107 4.636702 4.599337 5.083516 
> 
>   woodmod.covRob <- covRob(woodmod.dat)
>   woodmod.scr <- summary(woodmod.covRob)
>   print(woodmod.scr, digits = 4)
Call:
covRob(data = woodmod.dat)

Robust Estimate of Covariance: 
          V1         V2         V3         V4         V5
V1  0.038232  0.0066282 -0.0021650 -0.0015136 -0.0048570
V2  0.006628  0.0016512  0.0001382 -0.0010400 -0.0003837
V3 -0.002165  0.0001382  0.0036709  0.0001514  0.0015113
V4 -0.001514 -0.0010400  0.0001514  0.0048313 -0.0014409
V5 -0.004857 -0.0003837  0.0015113 -0.0014409  0.0044166

Robust Estimate of Location: 
    V1     V2     V3     V4     V5 
0.5693 0.1189 0.5093 0.5399 0.8964 

Eigenvalues: 
  Eval. 1   Eval. 2   Eval. 3   Eval. 4   Eval. 5 
0.0402612 0.0063495 0.0039998 0.0019171 0.0002747 

Robust Distances: 
 [1]  1.2996  0.3348  0.4099 15.8192  0.4578 18.0052  8.5876 24.2857  8.1617
[10]  5.1665  2.0412  5.3157  5.7099  0.2672  0.3173  5.5845  3.4097  0.4362
[19] 25.9520  3.5364
> 
>   woodmod.fm <- fit.models(list(Robust = "covRob", Classical = "ccov"),
+                            data = woodmod.dat)
>   woodmod.sfm <- summary(woodmod.fm)
>   print(woodmod.sfm, print.distances = TRUE)

Calls: 
Robust    : covRob(data = woodmod.dat)
Classical : ccov(data = woodmod.dat)

Comparison of Covariance/Correlation Estimates:
 (unique correlation terms) 
                [1,1]         [2,1]        [3,1]        [4,1]        [5,1]
Robust    0.038232411  0.0066281691 -0.002164958 -0.001513606 -0.004856958
Classical 0.008292029 -0.0002912358  0.003602155  0.002690821 -0.002868376
                [2,2]         [3,2]         [4,2]         [5,2]       [3,3]
Robust    0.001651187  0.0001381625 -0.0010400249 -0.0003837196 0.003670884
Classical 0.000488792 -0.0003520484 -0.0008387663  0.0006123968 0.004185187
                 [4,3]        [5,3]       [4,4]         [5,4]       [5,5]
Robust    0.0001513602  0.001511333 0.004831302 -0.0014408971 0.004416612
Classical 0.0015787579 -0.001691650 0.003946168 -0.0007919895 0.002756997

Comparison of Location Estimates: 
                 V1        V2        V3        V4        V5
Robust    0.5692784 0.1189235 0.5093381 0.5399037 0.8963895
Classical 0.5508500 0.1330400 0.5086500 0.5112000 0.9069500

Comparison of Eigenvalues: 
             Eval. 1     Eval. 2     Eval. 3     Eval. 4      Eval. 5
Robust    0.04026122 0.006349485 0.003999820 0.001917129 0.0002747469
Classical 0.01285267 0.002962077 0.002112468 0.001634436 0.0001075257
> 
> 
> 
> cleanEx(); nameEx("print.summary.glmRob")
> ### * print.summary.glmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.summary.glmRob
> ### Title: Print Method for summary.glmRob Objects
> ### Aliases: print.summary.glmRob
> ### Keywords: methods
> 
> ### ** Examples
> 
> data(breslow.dat)
> bres.rob <- glmRob(sumY ~ Age10 + Base4*Trt, family = poisson(), data = breslow.dat)
> bres.sum <- summary(bres.rob)
> print(bres.sum)

Call: glmRob(formula = sumY ~ Age10 + Base4 * Trt, family = poisson(), 
    data = breslow.dat)
Deviance Residuals:
         Min           1Q       Median           3Q          Max 
-54.31623554  -1.48733740   0.04103291   0.87947929   8.92506852 

Coefficients:
                        Value Std. Error    t value
(Intercept)         1.8351573 0.28542373  6.4295892
Age10               0.1208133 0.07495447  1.6118229
Base4               0.1391504 0.03540880  3.9298249
Trtprogabide       -0.3927866 0.22101495 -1.7771945
Base4:Trtprogabide  0.0218177 0.04002637  0.5450831

(Dispersion Parameter for poisson family taken to be 1 )

    Null Deviance: 11983.12 on 58 degrees of freedom

Residual Deviance: 3888.204 on 54 degrees of freedom

Number of Iterations: 9 

Correlation of Coefficients:
                   (Intercept) Age10       Base4       Trtprogabide
Age10              -0.80955848                                     
Base4              -0.62029916  0.10855293                         
Trtprogabide       -0.46447496  0.02404355  0.69012448             
Base4:Trtprogabide  0.52264463 -0.06401706 -0.88082103 -0.89435819 
> print(bres.sum, digits = 4)

Call: glmRob(formula = sumY ~ Age10 + Base4 * Trt, family = poisson(), 
    data = breslow.dat)
Deviance Residuals:
      Min        1Q    Median        3Q       Max 
-54.31624  -1.48734   0.04103   0.87948   8.92507 

Coefficients:
                      Value Std. Error t value
(Intercept)         1.83516    0.28542  6.4296
Age10               0.12081    0.07495  1.6118
Base4               0.13915    0.03541  3.9298
Trtprogabide       -0.39279    0.22101 -1.7772
Base4:Trtprogabide  0.02182    0.04003  0.5451

(Dispersion Parameter for poisson family taken to be 1 )

    Null Deviance: 11983 on 58 degrees of freedom

Residual Deviance: 3888 on 54 degrees of freedom

Number of Iterations: 9 

Correlation of Coefficients:
                   (Intercept) Age10    Base4    Trtprogabide
Age10              -0.80956                                  
Base4              -0.62030     0.10855                      
Trtprogabide       -0.46447     0.02404  0.69012             
Base4:Trtprogabide  0.52264    -0.06402 -0.88082 -0.89436    
> 
> 
> 
> cleanEx(); nameEx("print.summary.glmfm")
> ### * print.summary.glmfm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.summary.glmfm
> ### Title: Print Method for summary.glmfm Objects
> ### Aliases: print.summary.glmfm
> ### Keywords: methods
> 
> ### ** Examples
> 
> data(breslow.dat)
> bres.fm <- fit.models(list(Robust = "glmRob", Classical = "glm"),
+                       formula = sumY ~ Age10 + Base4*Trt,
+                       family = poisson(), data = breslow.dat)
> bres.sum <- summary(bres.fm)
> print(bres.sum)

Calls: 
   Robust: glmRob(formula = sumY ~ Age10 + Base4 * Trt, family = poisson(), 
    data = breslow.dat)
Classical: glm(formula = sumY ~ Age10 + Base4 * Trt, family = poisson(), 
    data = breslow.dat)

Deviance Residuals:
                  Min        1Q      Median        3Q       Max
   Robust: -54.316236 -1.487337  0.04103291 0.8794793  8.925069
Classical:  -6.003217 -2.074438 -1.08033178 0.8201996 11.038580

Coefficients:
                                    Value  Std. Error    t value      Pr(>|t|)
   Robust        (Intercept)  1.835157322 0.285423730  6.4295892            NA
Classical        (Intercept)  1.968014341 0.135929343 14.4782156  1.663600e-47
   Robust              Age10  0.120813333 0.074954472  1.6118229            NA
Classical              Age10  0.243490118 0.041297036  5.8960677  3.722663e-09
   Robust              Base4  0.139150397 0.035408803  3.9298249            NA
Classical              Base4  0.085426259 0.003665622 23.3047119 3.971458e-120
   Robust       Trtprogabide -0.392786555 0.221014948 -1.7771945            NA
Classical       Trtprogabide -0.255256522 0.076525418 -3.3355783  8.512219e-04
   Robust Base4:Trtprogabide  0.021817701 0.040026373  0.5450831            NA
Classical Base4:Trtprogabide  0.007534172 0.004408863  1.7088698  8.747507e-02

Residual Deviance:
   Robust: 3888.204 on 54 degrees of freedom
Classical: 556.5132 on 54 degrees of freedom
> print(bres.sum, digits = 4)

Calls: 
   Robust: glmRob(formula = sumY ~ Age10 + Base4 * Trt, family = poisson(), 
    data = breslow.dat)
Classical: glm(formula = sumY ~ Age10 + Base4 * Trt, family = poisson(), 
    data = breslow.dat)

Deviance Residuals:
               Min     1Q   Median     3Q    Max
   Robust: -54.316 -1.487  0.04103 0.8795  8.925
Classical:  -6.003 -2.074 -1.08033 0.8202 11.039

Coefficients:
                                 Value Std. Error t value   Pr(>|t|)
   Robust        (Intercept)  1.835157   0.285424  6.4296         NA
Classical        (Intercept)  1.968014   0.135929 14.4782  1.664e-47
   Robust              Age10  0.120813   0.074954  1.6118         NA
Classical              Age10  0.243490   0.041297  5.8961  3.723e-09
   Robust              Base4  0.139150   0.035409  3.9298         NA
Classical              Base4  0.085426   0.003666 23.3047 3.971e-120
   Robust       Trtprogabide -0.392787   0.221015 -1.7772         NA
Classical       Trtprogabide -0.255257   0.076525 -3.3356  8.512e-04
   Robust Base4:Trtprogabide  0.021818   0.040026  0.5451         NA
Classical Base4:Trtprogabide  0.007534   0.004409  1.7089  8.748e-02

Residual Deviance:
   Robust: 3888 on 54 degrees of freedom
Classical: 556.5 on 54 degrees of freedom
> 
> 
> 
> cleanEx(); nameEx("print.summary.lmRob")
> ### * print.summary.lmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.summary.lmRob
> ### Title: Print Method for summary.lmRob Objects
> ### Aliases: print.summary.lmRob
> ### Keywords: methods
> 
> ### ** Examples
> 
> data(stack.dat)
> stack.robsum <- summary(lmRob(Loss ~ ., data = stack.dat))
> print(stack.robsum, digits = 4)

Call: lmRob(formula = Loss ~ ., data = stack.dat)

Residuals:
    Min      1Q  Median      3Q     Max 
-8.6299 -0.6713  0.3594  1.1507  8.1740 

Coefficients:
            Value      Std. Error t value    Pr(>|t|)  
(Intercept) -3.765e+01  5.003e+00 -7.527e+00  8.289e-07
Air.Flow     7.977e-01  7.129e-02  1.119e+01  2.914e-09
Water.Temp   5.773e-01  1.755e-01  3.291e+00  4.318e-03
Acid.Conc.  -6.706e-02  6.512e-02 -1.030e+00  3.176e-01

Residual standard error: 1.837 on 17 degrees of freedom
Multiple R-Squared: 0.6205 

Test for Bias:
            statistic   p-value
M-estimate   2.750780 0.6003585
LS-estimate  2.640243 0.6197110
> 
> 
> 
> cleanEx(); nameEx("print.summary.lmfm")
> ### * print.summary.lmfm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.summary.lmfm
> ### Title: Print Method for summary.lmfm Objects
> ### Aliases: print.summary.lmfm
> ### Keywords: methods
> 
> ### ** Examples
> 
> data(stack.dat)
> stack.fm <- fit.models(list(Robust = "lmRob", LS = "lm"), Loss ~ ., data = stack.dat)
> stack.sum <- summary(stack.fm)
> print.summary.lmfm(stack.sum)

Calls: 
Robust: lmRob(formula = Loss ~ ., data = stack.dat)
    LS: lm(formula = Loss ~ ., data = stack.dat)

Residual Statistics:
              Min         1Q     Median       3Q      Max
Robust: -8.629863 -0.6713005  0.3593823 1.150717 8.174019
    LS: -7.237713 -1.7116536 -0.4550930 2.361418 5.697774

Coefficients:
                          Value  Std. Error    t value     Pr(>|t|)
Robust (Intercept) -37.65245890  5.00255991 -7.5266383 8.289315e-07
    LS (Intercept) -39.91967442 11.89599685 -3.3557234 3.750307e-03
Robust    Air.Flow   0.79768556  0.07129424 11.1886401 2.913857e-09
    LS    Air.Flow   0.71564020  0.13485819  5.3066130 5.799025e-05
Robust  Water.Temp   0.57734046  0.17545660  3.2905029 4.317707e-03
    LS  Water.Temp   1.29528612  0.36802427  3.5195672 2.630054e-03
Robust  Acid.Conc.  -0.06706018  0.06512470 -1.0297196 3.175704e-01
    LS  Acid.Conc.  -0.15212252  0.15629404 -0.9733098 3.440461e-01

Residual Scale Estimates:
Robust: 1.837073 on 17 degrees of freedom
    LS: 3.243364 on 17 degrees of freedom

Multiple R-Squared:
Robust: 0.6205384
    LS: 0.9135769

Bias Tests for Robust Models:
Robust:
            statistic   p-value
M-estimate   2.750780 0.6003585
LS-estimate  2.640243 0.6197110
> print(stack.sum)

Calls: 
Robust: lmRob(formula = Loss ~ ., data = stack.dat)
    LS: lm(formula = Loss ~ ., data = stack.dat)

Residual Statistics:
              Min         1Q     Median       3Q      Max
Robust: -8.629863 -0.6713005  0.3593823 1.150717 8.174019
    LS: -7.237713 -1.7116536 -0.4550930 2.361418 5.697774

Coefficients:
                          Value  Std. Error    t value     Pr(>|t|)
Robust (Intercept) -37.65245890  5.00255991 -7.5266383 8.289315e-07
    LS (Intercept) -39.91967442 11.89599685 -3.3557234 3.750307e-03
Robust    Air.Flow   0.79768556  0.07129424 11.1886401 2.913857e-09
    LS    Air.Flow   0.71564020  0.13485819  5.3066130 5.799025e-05
Robust  Water.Temp   0.57734046  0.17545660  3.2905029 4.317707e-03
    LS  Water.Temp   1.29528612  0.36802427  3.5195672 2.630054e-03
Robust  Acid.Conc.  -0.06706018  0.06512470 -1.0297196 3.175704e-01
    LS  Acid.Conc.  -0.15212252  0.15629404 -0.9733098 3.440461e-01

Residual Scale Estimates:
Robust: 1.837073 on 17 degrees of freedom
    LS: 3.243364 on 17 degrees of freedom

Multiple R-Squared:
Robust: 0.6205384
    LS: 0.9135769

Bias Tests for Robust Models:
Robust:
            statistic   p-value
M-estimate   2.750780 0.6003585
LS-estimate  2.640243 0.6197110
> 
> 
> 
> cleanEx(); nameEx("stack.dat")
> ### * stack.dat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stack.dat
> ### Title: Brownlee's Stack-Loss Data
> ### Aliases: stack.dat
> ### Keywords: datasets
> 
> ### ** Examples
> 
>   data(stack.dat)
>   stack.dat
   Loss Air.Flow Water.Temp Acid.Conc.
1    42       80         27         89
2    37       80         27         88
3    37       75         25         90
4    28       62         24         87
5    18       62         22         87
6    18       62         23         87
7    19       62         24         93
8    20       62         24         93
9    15       58         23         87
10   14       58         18         80
11   14       58         18         89
12   13       58         17         88
13   11       58         18         82
14   12       58         19         93
15    8       50         18         89
16    7       50         18         86
17    8       50         19         72
18    8       50         19         79
19    9       50         20         80
20   15       56         20         82
21   15       70         20         91
> 
> 
> 
> cleanEx(); nameEx("step.lmRob")
> ### * step.lmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: step.lmRob
> ### Title: Build a Model in a Stepwise Fashion
> ### Aliases: step.lmRob
> ### Keywords: robust regression methods
> 
> ### ** Examples
> 
> data(stack.dat)
> stack.rob <- lmRob(Loss ~ ., data = stack.dat)
> 
> ## The default behavior is to try dropping all terms ##
> step.lmRob(stack.rob)
Start:  RFPE= 16.032 
 Loss ~ Air.Flow + Water.Temp + Acid.Conc. 


Single term deletions

Model:
Loss ~ Air.Flow + Water.Temp + Acid.Conc.

scale:  1.837073 

           Df   RFPE
<none>        16.032
Air.Flow    1 36.213
Water.Temp  1 20.829
Acid.Conc.  1 16.049
Call:
lmRob(formula = Loss ~ ., data = stack.dat)

Coefficients:
 (Intercept)     Air.Flow   Water.Temp   Acid.Conc. 
-37.65245890   0.79768556   0.57734046  -0.06706018 

Degrees of freedom: 21 total; 17 residual
Residual standard error: 1.837073 
> 
> ## Keep Water.Temp in the model ##
> my.scope <- list(lower = . ~ Water.Temp, upper = . ~ .)
> step.lmRob(stack.rob, scope = my.scope)
Start:  RFPE= 16.032 
 Loss ~ Air.Flow + Water.Temp + Acid.Conc. 


Single term deletions

Model:
Loss ~ Air.Flow + Water.Temp + Acid.Conc.

scale:  1.837073 

           Df   RFPE
<none>        16.032
Air.Flow    1 36.213
Acid.Conc.  1 16.049
Call:
lmRob(formula = Loss ~ ., data = stack.dat)

Coefficients:
 (Intercept)     Air.Flow   Water.Temp   Acid.Conc. 
-37.65245890   0.79768556   0.57734046  -0.06706018 

Degrees of freedom: 21 total; 17 residual
Residual standard error: 1.837073 
> 
> ## Try the fast procedure ##
> step.lmRob(stack.rob, scope = my.scope, fast = TRUE)
Start:  RFPE= 16.032 
 Loss ~ Air.Flow + Water.Temp + Acid.Conc. 


Single term deletions

Model:
Loss ~ Air.Flow + Water.Temp + Acid.Conc.

scale:  1.837073 

           Df    RFPE
<none>         16.032
Air.Flow    1 166.599
Acid.Conc.  1  19.618
Call:
lmRob(formula = Loss ~ ., data = stack.dat)

Coefficients:
 (Intercept)     Air.Flow   Water.Temp   Acid.Conc. 
-37.65245890   0.79768556   0.57734046  -0.06706018 

Degrees of freedom: 21 total; 17 residual
Residual standard error: 1.837073 
> 
> 
> 
> cleanEx(); nameEx("summary.covfm")
> ### * summary.covfm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.covfm
> ### Title: Summary Method
> ### Aliases: summary.cov summary.covRob summary.covfm
> ### Keywords: methods
> 
> ### ** Examples
> 
>   data(woodmod.dat)
>   woodmod.cov <- ccov(woodmod.dat)
>   woodmod.sc <- summary(woodmod.cov)
> 
>   woodmod.covRob <- covRob(woodmod.dat)
>   woodmod.scr <- summary(woodmod.covRob)
> 
>   woodmod.fm <- fit.models(list(Robust = "covRob", Classical = "ccov"),
+                 data = woodmod.dat)
>   woodmod.sfm <- summary(woodmod.fm)
> 
> 
> 
> cleanEx(); nameEx("summary.glmRob")
> ### * summary.glmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.glmRob
> ### Title: Summarizing Robust Generalized Linear Model Fits
> ### Aliases: summary.glmRob
> ### Keywords: methods robust regression
> 
> ### ** Examples
> 
> data(breslow.dat)
> bres.rob <- glmRob(sumY ~ Age10 + Base4*Trt, family = poisson(), data = breslow.dat)
> bres.sum <- summary(bres.rob)
> bres.sum

Call: glmRob(formula = sumY ~ Age10 + Base4 * Trt, family = poisson(), 
    data = breslow.dat)
Deviance Residuals:
         Min           1Q       Median           3Q          Max 
-54.31623554  -1.48733740   0.04103291   0.87947929   8.92506852 

Coefficients:
                        Value Std. Error    t value
(Intercept)         1.8351573 0.28542373  6.4295892
Age10               0.1208133 0.07495447  1.6118229
Base4               0.1391504 0.03540880  3.9298249
Trtprogabide       -0.3927866 0.22101495 -1.7771945
Base4:Trtprogabide  0.0218177 0.04002637  0.5450831

(Dispersion Parameter for poisson family taken to be 1 )

    Null Deviance: 11983.12 on 58 degrees of freedom

Residual Deviance: 3888.204 on 54 degrees of freedom

Number of Iterations: 9 

Correlation of Coefficients:
                   (Intercept) Age10       Base4       Trtprogabide
Age10              -0.80955848                                     
Base4              -0.62029916  0.10855293                         
Trtprogabide       -0.46447496  0.02404355  0.69012448             
Base4:Trtprogabide  0.52264463 -0.06401706 -0.88082103 -0.89435819 
> 
> 
> 
> cleanEx(); nameEx("summary.glmfm")
> ### * summary.glmfm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.glmfm
> ### Title: Summary Method for glmfm Objects
> ### Aliases: summary.glmfm
> ### Keywords: methods robust regression
> 
> ### ** Examples
> 
> data(breslow.dat)
> bres.fm <- fit.models(list(Robust = "glmRob", Classical = "glm"),
+                       formula = sumY ~ Age10 + Base4*Trt,
+                       family = poisson(), data = breslow.dat)
> bres.sum <- summary(bres.fm)
> bres.sum

Calls: 
   Robust: glmRob(formula = sumY ~ Age10 + Base4 * Trt, family = poisson(), 
    data = breslow.dat)
Classical: glm(formula = sumY ~ Age10 + Base4 * Trt, family = poisson(), 
    data = breslow.dat)

Deviance Residuals:
                  Min        1Q      Median        3Q       Max
   Robust: -54.316236 -1.487337  0.04103291 0.8794793  8.925069
Classical:  -6.003217 -2.074438 -1.08033178 0.8201996 11.038580

Coefficients:
                                    Value  Std. Error    t value      Pr(>|t|)
   Robust        (Intercept)  1.835157322 0.285423730  6.4295892            NA
Classical        (Intercept)  1.968014341 0.135929343 14.4782156  1.663600e-47
   Robust              Age10  0.120813333 0.074954472  1.6118229            NA
Classical              Age10  0.243490118 0.041297036  5.8960677  3.722663e-09
   Robust              Base4  0.139150397 0.035408803  3.9298249            NA
Classical              Base4  0.085426259 0.003665622 23.3047119 3.971458e-120
   Robust       Trtprogabide -0.392786555 0.221014948 -1.7771945            NA
Classical       Trtprogabide -0.255256522 0.076525418 -3.3355783  8.512219e-04
   Robust Base4:Trtprogabide  0.021817701 0.040026373  0.5450831            NA
Classical Base4:Trtprogabide  0.007534172 0.004408863  1.7088698  8.747507e-02

Residual Deviance:
   Robust: 3888.204 on 54 degrees of freedom
Classical: 556.5132 on 54 degrees of freedom
> 
> 
> 
> cleanEx(); nameEx("summary.lmRob")
> ### * summary.lmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.lmRob
> ### Title: Summarizing Robust Linear Model Fits
> ### Aliases: summary.lmRob
> ### Keywords: methods robust regression
> 
> ### ** Examples
> 
> data(stack.dat)
> stack.rob <- lmRob(Loss ~ ., data = stack.dat) 
> stack.sum <- summary(stack.rob)
> stack.sum

Call: lmRob(formula = Loss ~ ., data = stack.dat)

Residuals:
       Min         1Q     Median         3Q        Max 
-8.6298634 -0.6713005  0.3593823  1.1507173  8.1740186 

Coefficients:
            Value         Std. Error    t value       Pr(>|t|)     
(Intercept) -3.765246e+01  5.002560e+00 -7.526638e+00  8.289315e-07
Air.Flow     7.976856e-01  7.129424e-02  1.118864e+01  2.913857e-09
Water.Temp   5.773405e-01  1.754566e-01  3.290503e+00  4.317707e-03
Acid.Conc.  -6.706018e-02  6.512470e-02 -1.029720e+00  3.175704e-01

Residual standard error: 1.83707 on 17 degrees of freedom
Multiple R-Squared: 0.620538 

Test for Bias:
            statistic   p-value
M-estimate   2.750780 0.6003585
LS-estimate  2.640243 0.6197110
> stack.bse <- summary(stack.rob, bootstrap.se = TRUE)
> stack.bse

Call: lmRob(formula = Loss ~ ., data = stack.dat)

Residuals:
       Min         1Q     Median         3Q        Max 
-8.6298634 -0.6713005  0.3593823  1.1507173  8.1740186 

Coefficients:
            Value         Std. Error    Bootstrap SE  t value      
(Intercept) -3.765246e+01  5.002560e+00  4.437905e+00 -7.526638e+00
Air.Flow     7.976856e-01  7.129424e-02  5.086254e-02  1.118864e+01
Water.Temp   5.773405e-01  1.754566e-01  1.355147e-01  3.290503e+00
Acid.Conc.  -6.706018e-02  6.512470e-02  5.842471e-02 -1.029720e+00
            Pr(>|t|)     
(Intercept)  8.289315e-07
Air.Flow     2.913857e-09
Water.Temp   4.317707e-03
Acid.Conc.   3.175704e-01

Residual standard error: 1.83707 on 17 degrees of freedom
Multiple R-Squared: 0.620538 

Test for Bias:
            statistic   p-value
M-estimate   2.750780 0.6003585
LS-estimate  2.640243 0.6197110
> 
> 
> 
> cleanEx(); nameEx("summary.lmfm")
> ### * summary.lmfm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.lmfm
> ### Title: Summary Method for lmfm Objects
> ### Aliases: summary.lmfm
> ### Keywords: methods robust regression
> 
> ### ** Examples
> 
> data(stack.dat)
> stack.fm <- fit.models(list(Robust = "lmRob", LS = "lm"), Loss ~ ., data = stack.dat)
> stack.sum <- summary(stack.fm)
> stack.sum

Calls: 
Robust: lmRob(formula = Loss ~ ., data = stack.dat)
    LS: lm(formula = Loss ~ ., data = stack.dat)

Residual Statistics:
              Min         1Q     Median       3Q      Max
Robust: -8.629863 -0.6713005  0.3593823 1.150717 8.174019
    LS: -7.237713 -1.7116536 -0.4550930 2.361418 5.697774

Coefficients:
                          Value  Std. Error    t value     Pr(>|t|)
Robust (Intercept) -37.65245890  5.00255991 -7.5266383 8.289315e-07
    LS (Intercept) -39.91967442 11.89599685 -3.3557234 3.750307e-03
Robust    Air.Flow   0.79768556  0.07129424 11.1886401 2.913857e-09
    LS    Air.Flow   0.71564020  0.13485819  5.3066130 5.799025e-05
Robust  Water.Temp   0.57734046  0.17545660  3.2905029 4.317707e-03
    LS  Water.Temp   1.29528612  0.36802427  3.5195672 2.630054e-03
Robust  Acid.Conc.  -0.06706018  0.06512470 -1.0297196 3.175704e-01
    LS  Acid.Conc.  -0.15212252  0.15629404 -0.9733098 3.440461e-01

Residual Scale Estimates:
Robust: 1.837073 on 17 degrees of freedom
    LS: 3.243364 on 17 degrees of freedom

Multiple R-Squared:
Robust: 0.6205384
    LS: 0.9135769

Bias Tests for Robust Models:
Robust:
            statistic   p-value
M-estimate   2.750780 0.6003585
LS-estimate  2.640243 0.6197110
> 
> 
> 
> cleanEx(); nameEx("weight.funs")
> ### * weight.funs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: weight.funs
> ### Title: Weight Functions Psi, Rho, Chi
> ### Aliases: psi.weight rho.weight psp.weight chi.weight
> ### Keywords: robust
> 
> ### ** Examples
> 
> x <- seq(-4,4, length=401)
> f.x <- cbind(psi = psi.weight(x), psp = psp.weight(x),
+              chi = chi.weight(x), rho = rho.weight(x))
> es <- expression(psi(x), {psi*minute}(x), chi(x), rho(x))
> leg <- as.expression(lapply(seq_along(es), function(i)
+           substitute(C == E, list(C=colnames(f.x)[i], E=es[[i]]))))
> matplot(x, f.x, type = "l", lwd = 1.5,
+         main = "psi.weight(.) etc -- 'optimal'")
> abline(h = 0, v = 0, lwd = 2, col = "#D3D3D380") # opaque gray
Warning in int_abline(a = a, b = b, h = h, v = v, untf = untf, ...) :
  semi-transparency is not supported on this device: reported only once per page
> legend("bottom", leg, inset = .01,
+        lty = 1:4, col = 1:4, lwd = 1.5, bg = "#FFFFFFC0")
> 
> 
> 
> cleanEx(); nameEx("woodmod.dat")
> ### * woodmod.dat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: woodmod.dat
> ### Title: Modified Wood Data
> ### Aliases: woodmod.dat
> ### Keywords: datasets
> 
> ### ** Examples
> 
>   data(woodmod.dat)
>   woodmod.dat
      V1     V2    V3    V4    V5
1  0.573 0.1059 0.465 0.538 0.841
2  0.651 0.1356 0.527 0.545 0.887
3  0.606 0.1273 0.494 0.521 0.920
4  0.437 0.1591 0.446 0.423 0.992
5  0.547 0.1135 0.531 0.519 0.915
6  0.444 0.1628 0.429 0.411 0.984
7  0.489 0.1231 0.562 0.455 0.824
8  0.413 0.1673 0.418 0.430 0.978
9  0.536 0.1182 0.592 0.464 0.854
10 0.685 0.1564 0.631 0.564 0.914
11 0.664 0.1588 0.506 0.481 0.867
12 0.703 0.1335 0.519 0.484 0.812
13 0.653 0.1395 0.625 0.519 0.892
14 0.586 0.1114 0.505 0.565 0.889
15 0.534 0.1143 0.521 0.570 0.889
16 0.523 0.1320 0.505 0.612 0.919
17 0.580 0.1249 0.546 0.608 0.954
18 0.448 0.1028 0.522 0.534 0.918
19 0.417 0.1687 0.405 0.415 0.981
20 0.528 0.1057 0.424 0.566 0.909
> 
>   data(wood, package = "robustbase")
>   stopifnot(data.matrix(woodmod.dat) ==
+             data.matrix(wood [,1:5]))
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  18.259 0.557 19.561 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
