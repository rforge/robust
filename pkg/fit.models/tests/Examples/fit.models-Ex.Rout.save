
R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin14.1.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "fit.models"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('fit.models')
Loading required package: lattice
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("fit.models")
> ### * fit.models
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fit.models
> ### Title: Fit dot Models
> ### Aliases: fit.models
> ### Keywords: models
> 
> ### ** Examples
> 
>   data(stackloss)
> 
>   # First, use fit.models to fit robust and least-squares linear
>   # regression models to the Brownlee's Stack Loss Plant Data.
> 
>   # Step 1: rlm (robust linear model) is in the MASS package.
>   require(MASS)
Loading required package: MASS
> 
>   # Step 2: tell fit.models rlm can be compared to lm
>   fmclass.add.class("lmfm", "rlm")
> 
>   fm1 <- fit.models(c("rlm", "lm"), stack.loss ~ ., data = stackloss)
> 
>   summary(fm1) #rlm does not provide p-values or Multiple R-squared

Calls:
rlm: rlm(formula = stack.loss ~ ., data = stackloss)
 lm: lm(formula = stack.loss ~ ., data = stackloss)

Residual Statistics:
        Min     1Q   Median    3Q   Max
rlm: -8.918 -1.731  0.06187 1.543 6.502
 lm: -7.238 -1.712 -0.45509 2.361 5.698

Coefficients:
                  Estimate Std. Error t value Pr(>|t|)    
(Intercept): rlm: -41.0265     9.8073  -4.183             
              lm: -39.9197    11.8960  -3.356  0.00375 ** 
                                                          
   Air.Flow: rlm:   0.8294     0.1112   7.460             
              lm:   0.7156     0.1349   5.307  5.8e-05 ***
                                                          
 Water.Temp: rlm:   0.9261     0.3034   3.052             
              lm:   1.2953     0.3680   3.520  0.00263 ** 
                                                          
 Acid.Conc.: rlm:  -0.1278     0.1289  -0.992             
              lm:  -0.1521     0.1563  -0.973  0.34405    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual Scale Estimates:
rlm: 2.441 on 17 degrees of freedom
 lm: 3.243 on 17 degrees of freedom

Multiple R-squared:
 lm: 0.9136 

>   plot(fm1)
> 
> 
>   # Second, use fit.models to combine already fitted models into a
>   # fit.models object.
> 
>   lm.complete <- lm(stack.loss ~ ., data = stackloss)
>   lm.clean <- lm(stack.loss ~ ., data = stackloss, subset = 5:20)
> 
>   fm2 <- fit.models(lm.clean, lm.complete)
> 
>   summary(fm2)

Calls:
   lm.clean: lm(formula = stack.loss ~ ., data = stackloss, subset = 5:20)
lm.complete: lm(formula = stack.loss ~ ., data = stackloss)

Residual Statistics:
                Min      1Q   Median     3Q   Max
   lm.clean: -2.102 -0.5576 -0.04437 0.6418 2.135
lm.complete: -7.238 -1.7117 -0.45509 2.3614 5.698

Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
(Intercept):    lm.clean: -35.48420    4.52650  -7.839 4.63e-06 ***
             lm.complete: -39.91967   11.89600  -3.356  0.00375 ** 
                                                                   
   Air.Flow:    lm.clean:   0.68609    0.08758   7.834 4.66e-06 ***
             lm.complete:   0.71564    0.13486   5.307 5.80e-05 ***
                                                                   
 Water.Temp:    lm.clean:   0.56710    0.15321   3.702  0.00303 ** 
             lm.complete:   1.29529    0.36802   3.520  0.00263 ** 
                                                                   
 Acid.Conc.:    lm.clean:  -0.01725    0.06314  -0.273  0.78933    
             lm.complete:  -0.15212    0.15629  -0.973  0.34405    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual Scale Estimates:
   lm.clean: 1.156 on 12 degrees of freedom
lm.complete: 3.243 on 17 degrees of freedom

Multiple R-squared:
   lm.clean: 0.9421 
lm.complete: 0.9136 

>   plot(fm2)
> 
> 
>   # Name the models in the fit.models object.
>   
>   fm3 <- fit.models(c(Robust = "rlm", "Least-Squares" = "lm"),
+                     stack.loss ~ ., data = stackloss)
> 
>   fm4 <- fit.models(Clean = lm.clean, Complete = lm.complete)
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("leverage")
> ### * leverage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: leverage
> ### Title: Leverage
> ### Aliases: leverage leverage.default leverage.lm
> ### Keywords: regression methods
> 
> ### ** Examples
> 
> ## Example from lm:
> ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
> trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
> group <- gl(2,10,20, labels=c("Ctl","Trt"))
> weight <- c(ctl, trt)
> lm.D9 <- lm(weight ~ group)
> 
> leverage(lm.D9)
  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20 
0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 
> 
> 
> 
> cleanEx()
> nameEx("plot.glmfm")
> ### * plot.glmfm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.glmfm
> ### Title: Comparison Diagnostic Plots for Generalized Linear Models
> ### Aliases: plot.glmfm
> ### Keywords: hplot methods
> 
> ### ** Examples
> 
> # From ?glm:
> # A Gamma example, from McCullagh & Nelder (1989, pp. 300-2)
> 
> clotting <- data.frame(
+     u = c(5,10,15,20,30,40,60,80,100),
+     lot1 = c(118,58,42,35,27,25,21,19,18),
+     lot2 = c(69,35,26,21,18,16,13,12,12))
> 
> lot1 <- glm(lot1 ~ log(u), data = clotting, family = Gamma)
> lot2 <- glm(lot2 ~ log(u), data = clotting, family = Gamma)
> 
> fm <- fit.models(lot1, lot2)
> plot(fm)
> 
> 
> 
> cleanEx()
> nameEx("plot.lmfm")
> ### * plot.lmfm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.lmfm
> ### Title: Comparison Diagnostic Plots for Linear Regression Models
> ### Aliases: plot.lmfm
> ### Keywords: hplot methods
> 
> ### ** Examples
> 
> data(stackloss)
> stack.lm <- lm(stack.loss ~ ., data = stackloss)
> stack.clean <- lm(stack.loss ~ ., data = stackloss, subset = 5:20)
> fm <- fit.models(stack.clean, stack.lm)
> plot(fm)
> 
> 
> 
> cleanEx()
> nameEx("rmodified")
> ### * rmodified
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmodified
> ### Title: Extract Modified Residuals
> ### Aliases: rmodified rmodified.default
> ### Keywords: regression methods
> 
> ### ** Examples
> 
> ## Example from lm:
> ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
> trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
> group <- gl(2,10,20, labels=c("Ctl","Trt"))
> weight <- c(ctl, trt)
> lm.D9 <- lm(weight ~ group)
> 
> rmodified(lm.D9)
          1           2           3           4           5           6 
-0.90862778  0.57764272  0.15600570  1.13631177 -0.56077724 -0.44482706 
          7           8           9          10          11          12 
 0.14546477 -0.52915446  0.31411958  0.11384200  0.15705979 -0.51755944 
         13          14          15          16          17          18 
-0.26457723 -1.12893312  1.27439790 -0.87595091  1.44305271  0.24138719 
         19          20 
-0.35944556  0.03056868 
> 
> 
> 
> cleanEx()
> nameEx("summary.glmfm")
> ### * summary.glmfm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.glmfm
> ### Title: Comparison Summaries for Generalized Linear Models
> ### Aliases: summary.glmfm
> ### Keywords: regression methods
> 
> ### ** Examples
> 
> # From ?glm:
> # A Gamma example, from McCullagh & Nelder (1989, pp. 300-2)
> 
> clotting <- data.frame(
+     u = c(5,10,15,20,30,40,60,80,100),
+     lot1 = c(118,58,42,35,27,25,21,19,18),
+     lot2 = c(69,35,26,21,18,16,13,12,12))
> 
> lot1 <- glm(lot1 ~ log(u), data = clotting, family = Gamma)
> lot2 <- glm(lot2 ~ log(u), data = clotting, family = Gamma)
> 
> fm <- fit.models(lot1, lot2)
> summary(fm)

Calls:
lot1: glm(formula = lot1 ~ log(u), family = Gamma, data = clotting)
lot2: glm(formula = lot2 ~ log(u), family = Gamma, data = clotting)

Deviance Residuals:
           Min       1Q   Median      3Q     Max
lot1: -0.04008 -0.03756 -0.02637 0.02905 0.08641
lot2: -0.05574 -0.02925  0.01030 0.01714 0.06372

Coefficients:
                     Estimate Std. Error z value Pr(>|z|)    
(Intercept): lot1: -0.0165544  0.0009275  -17.85 4.28e-07 ***
             lot2: -0.0239085  0.0013265  -18.02 4.00e-07 ***
                                                             
     log(u): lot1:  0.0153431  0.0004150   36.98 2.75e-09 ***
             lot2:  0.0235992  0.0005768   40.91 1.36e-09 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Null deviance:
  lot1: 3.513 on 8 degrees of freedom
  lot2: 3.119 on 8 degrees of freedom

Residual deviance:
  lot1: 0.01673 on 7 degrees of freedom
  lot2: 0.01267 on 7 degrees of freedom

> 
> 
> 
> cleanEx()
> nameEx("summary.lmfm")
> ### * summary.lmfm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.lmfm
> ### Title: Comparison Summaries for Linear Regression Models
> ### Aliases: summary.lmfm
> ### Keywords: methods regression
> 
> ### ** Examples
> 
> data(stackloss)
> m1 <- lm(stack.loss ~ ., data = stackloss)
> m2 <- lm(stack.loss ~ . - Acid.Conc., data = stackloss)
> 
> fm <- fit.models(m1, m2)
> print(fm.sum <- summary(fm))

Calls:
m1: lm(formula = stack.loss ~ ., data = stackloss)
m2: lm(formula = stack.loss ~ . - Acid.Conc., data = stackloss)

Residual Statistics:
       Min     1Q  Median    3Q   Max
m1: -7.238 -1.712 -0.4551 2.361 5.698
m2: -7.529 -1.750  0.1894 2.116 5.659

Coefficients:
                 Estimate Std. Error t value Pr(>|t|)    
(Intercept): m1: -39.9197    11.8960  -3.356  0.00375 ** 
             m2: -50.3588     5.1383  -9.801 1.22e-08 ***
                                                         
   Air.Flow: m1:   0.7156     0.1349   5.307 5.80e-05 ***
             m2:   0.6712     0.1267   5.298 4.90e-05 ***
                                                         
 Water.Temp: m1:   1.2953     0.3680   3.520  0.00263 ** 
             m2:   1.2954     0.3675   3.525  0.00242 ** 
                                                         
 Acid.Conc.: m1:  -0.1521     0.1563  -0.973  0.34405    
             m2:                                         
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual Scale Estimates:
m1: 3.243 on 17 degrees of freedom
m2: 3.239 on 18 degrees of freedom

Multiple R-squared:
m1: 0.9136 
m2: 0.9088 

> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.351 0.04 2.407 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
